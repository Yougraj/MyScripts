#!/usr/bin/env python

import os
import subprocess
import importlib
import time
import re
from tqdm import tqdm
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import urllib.request
import argparse  # Import the argparse library


# Checking if a package is installed or not
def is_package_installed(package_name):
    try:
        importlib.import_module(package_name)
        return True
    except ImportError:
        return False


# If not installed, attempt to install the package
def install_package(package_name):
    try:
        subprocess.check_call(["pip", "install", package_name])
        return True
    except subprocess.CalledProcessError:
        return False


# Dunstify the downloading item with an image
def dunstify_with_image(song, status, img_path=None):
    # Construct the command with properly quoted icon file path
    if img_path:
        command = f'dunstify -I "{img_path}" -a "SPT" -t 5000 "{status}" "{song}"'
    else:
        command = f'dunstify -a "SPT" -t 5000 "{status}" "{song}"'

    try:
        # Run the command
        subprocess.run(command, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        # Handle errors
        print(f"Error: {e}")


def get_album_art_by_name(album_or_song_name, status, output_dir):
    # Set your Spotify client credentials
    CLIENT_ID = os.environ.get("SPOTIPY_CLIENT_ID")
    CLIENT_SECRET = os.environ.get("SPOTIPY_CLIENT_SECRET")

    # Initialize Spotipy with client credentials
    client_credentials_manager = SpotifyClientCredentials(
        client_id=CLIENT_ID, client_secret=CLIENT_SECRET
    )
    sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

    # Search for the album or song by name
    results = sp.search(q=album_or_song_name, type="album,track")

    # Check if there are any results
    if "tracks" in results and "items" in results["tracks"]:
        items = results["tracks"]["items"]
        if items:
            # Get the first result
            item = items[0]
            if (
                "album" in item
                and "images" in item["album"]
                and item["album"]["images"]
            ):
                # Get the URL of the album art image
                image_url = item["album"]["images"][0]["url"]

                # Download the image and save it to the output directory
                image_extension = ".png"
                image_filename = os.path.join(
                    output_dir, f"{album_or_song_name}_album_art{image_extension}"
                )
                urllib.request.urlretrieve(image_url, image_filename)

                dunstify_with_image(album_or_song_name, status, image_filename)
        # print(f"Album art not found for '{album_or_song_name}'")
    return None


# Function to download Spotify content with a simplified time-based progress bar
def download_spotify_content(link, output_directory):
    command = f"spotify_dl -l {link} -o {output_directory}"
    process = subprocess.Popen(
        command,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
    )

    # Initialize the song name and progress variables
    song_name = None
    start_time = time.time()

    # Initialize the main progress bar
    pbar = tqdm(total=100, unit="s", unit_scale=True, desc="Downloading playlist")

    for line in process.stdout:
        elapsed_time = time.time() - start_time
        if elapsed_time >= 1.0:
            pbar.update(1)
            start_time = time.time()

        if "Downloading playlist:" in line:
            song_name = line.split("Downloading playlist:")[
                1
            ].strip()  # Extract the song name
            song_name_formating = re.sub(r"\sLyrics", "", song_name)
            get_album_art_by_name(song_name, "Downloading", output_directory)
        elif "Download complete" in line and song_name:
            get_album_art_by_name(song_name, "Download Complete", output_directory)
            os.remove(f"{output_directory}/{song_name}_album_art.png")
            song_name = None  # Reset song name

    # Close the main progress bar when done
    pbar.close()

    process.wait()


# Replace 'package_name' with the name of the Python package you want to check and install.
package_name = "spotify_dl"

if not is_package_installed(package_name):
    print(f"{package_name} is not installed. Installing...")
    if install_package(package_name):
        print(f"{package_name} has been successfully installed.")
    else:
        print(f"Failed to install {package_name}. Please install it manually.")


def rofi_input_and_output(prompt, input_placeholder=""):
    rofi_cmd = ["rofi", "-dmenu", "-p", prompt, "-mesg", input_placeholder]

    rofi_proc = subprocess.Popen(
        rofi_cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, text=True
    )
    user_input, _ = rofi_proc.communicate(input="")

    return user_input.strip()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Spotify Downloader")

    # Add a version flag (-v)
    parser.add_argument("-v", "--version", action="version", version="%(prog)s 0.3")

    args = parser.parse_args()

    while True:
        # Get the Spotify link from Rofi
        spotify_link = rofi_input_and_output(
            "Enter the Spotify link (album, track, or playlist):"
        )

        # Check if spotify_link is None or empty before proceeding
        if spotify_link:
            # Get the output directory from Rofi
            output_dir = rofi_input_and_output(
                "Enter the output directory (default is ~/Music):"
            )

            # If the user didn't provide an output directory, use the default
            if not output_dir:
                output_dir = os.path.expanduser("~/Music")

            # Ensure the output directory exists
            if not os.path.exists(output_dir):
                os.makedirs(output_dir)

            # Check if the output directory ends with a slash
            if not output_dir.endswith("/"):
                output_dir += "/"

            # Download Spotify content with a simplified time-based progress bar
            download_spotify_content(spotify_link, output_dir)
            # Check if the download was successful
            if os.path.exists(output_dir):
                print("Download complete.")
                break  # Exit the loop when download is complete
            else:
                print("Download failed.")
                break  # Exit the loop when download has failed

        else:
            # Exit the loop if spotify_link is None or empty
            print("No Spotify link provided. Exiting.")
            break
